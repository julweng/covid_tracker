{"version":3,"sources":["components/Cards/index.jsx","api/fetchData.js","api/fetchDailyData.js","api/fetchCountries.js","components/Chart/index.jsx","components/CountryPicker/index.jsx","App.js","serviceWorker.js","index.js","image/image.png"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchDataSuccess","res","type","fetchData","dispatch","country","a","changeableUrl","axios","get","error","message","dataReducer","state","action","loading","fetchDailyDataSuccess","map","reportDate","total","date","fetchDailyData","dailyDataReducer","fetchCountriesSuccess","countries","name","iso3","fetchCountries","countriesReducer","Charts","selectedCountry","selectedDailyData","useReducer","useEffect","fetchDailyAPI","lineChartData","labels","datasets","label","borderColor","fill","backgroundColor","lineChart","length","barChartData","options","legend","display","title","text","barChart","CountryPicker","handleCountryChange","fetchAPI","FormControl","NativeSelect","onChange","e","target","key","App","useState","setCountry","JSON","stringify","src","coronaImage","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.27c070bd.chunk.js","sourcesContent":["import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nimport './Cards.css';\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n  return (\n    <div className=\"card-container\">\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx('card', 'infected')}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed?.value ?? 0}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx('card', 'recovered')}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered?.value ?? 0}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx('card', 'deaths')}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths?.value ?? 0}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\n// action\nconst fetchDataRequest = () => ({\n  type: 'FETCH_DATA_REQUEST',\n});\n\nconst fetchDataSuccess = res => {\n  const {confirmed, recovered, deaths, lastUpdate} = res.data;\n  return {\n    type: 'FETCH_DATA_SUCCESS',\n    data: {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    },\n  };\n};\n\nconst fetchDataFailure = err => ({\n  type: 'FETCH_DATA_FAILURE',\n  error: err.message,\n});\n\nconst fetchData = async (dispatch, country) => {\n  let changeableUrl = url;\n\n  if(country) {\n    changeableUrl = `${url}/countries/${country}`\n  }\n\n  dispatch(fetchDataRequest());\n  try {\n    const res = await axios.get(changeableUrl);\n    dispatch(fetchDataSuccess(res));\n    return res;\n  } catch (err) {\n    dispatch(fetchDataFailure(err));\n  }\n}\n\n// reducer\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_DATA_REQUEST':\n      return {\n        data: {},\n        loading: true,\n        error: '',\n      };\n    case 'FETCH_DATA_SUCCESS':\n      return {\n        data: action.data,\n        loading: false,\n        error: '',\n      };\n    case 'FETCH_DATA_FAILURE':\n      return {\n        data: {},\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport {fetchData, dataReducer};\n","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api/daily';\n\n// action\nconst fetchDailyDataRequest = () => ({\n  type: 'FETCH__DAILY_DATA_REQUEST',\n});\n\nconst fetchDailyDataSuccess = (res) => {\n  return {\n    type: 'FETCH_DAILY_DATA_SUCCESS',\n    data: res.data.map(({ confirmed, deaths, reportDate }) => ({\n      confirmed: confirmed.total,\n      deaths: deaths.total,\n      date: reportDate\n    }))\n  };\n};\n\nconst fetchDailyDataFailure = (err) => ({\n  type: 'FETCH_DAILY_DATA_FAILURE',\n  error: err.message,\n});\n\nconst fetchDailyData = async (dispatch) => {\n  dispatch(fetchDailyDataRequest());\n  try {\n    const res = await axios.get(url);\n    dispatch(fetchDailyDataSuccess(res));\n    return res;\n  } catch (err) {\n    dispatch(fetchDailyDataFailure(err));\n  }\n};\n\n// reducer\nconst dailyDataReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH__DAILY_DATA_REQUEST':\n      return {\n        data: [],\n        loading: true,\n        error: '',\n      };\n    case 'FETCH_DAILY_DATA_SUCCESS':\n      return {\n        data: action.data,\n        loading: false,\n        error: '',\n      };\n    case 'FETCH_DAILY_DATA_FAILURE':\n      return {\n        data: [],\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport {fetchDailyData, dailyDataReducer};\n","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api/countries';\n\n// action\nconst fetchCountriesRequest = () => ({\n  type: 'FETCH_COUNTRIES_REQUEST',\n});\n\nconst fetchCountriesSuccess = (res) => {\n  return {\n    type: 'FETCH_COUNTRIES_SUCCESS',\n    data: res.data.countries.map(({name, iso3}) => ({\n      name,\n      iso3,\n    })),\n  };\n};\n\nconst fetchCountriesFailure = (err) => ({\n  type: 'FETCH_COUNTRIES_FAILURE',\n  error: err.message,\n});\n\nconst fetchCountries = async (dispatch) => {\n  dispatch(fetchCountriesRequest());\n  try {\n    const res = await axios.get(url);\n    dispatch(fetchCountriesSuccess(res));\n    return res;\n  } catch (err) {\n    dispatch(fetchCountriesFailure(err));\n  }\n};\n\n// reducer\nconst countriesReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_COUNTRIES_REQUEST':\n      return {\n        countries: [],\n        loading: true,\n        error: '',\n      };\n    case 'FETCH_COUNTRIES_SUCCESS':\n      return {\n        countries: action.data,\n        loading: false,\n        error: '',\n      };\n    case 'FETCH_COUNTRIES_FAILURE':\n      return {\n        countries: [],\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport {fetchCountries, countriesReducer};\n","import React, {useEffect, useReducer} from 'react';\nimport {Line, Bar} from 'react-chartjs-2';\nimport {fetchDailyData, dailyDataReducer} from '../../api';\nimport './Chart.css';\n\nconst Charts = ({\n  selectedCountry,\n  selectedDailyData: {confirmed, recovered, deaths},\n}) => {\n  const initialState = {\n    data: [],\n    loading: false,\n    error: '',\n  };\n\n  const [state, dispatch] = useReducer(dailyDataReducer, initialState);\n\n  useEffect(() => {\n    const fetchDailyAPI = async () => {\n      await fetchDailyData(dispatch);\n    };\n    fetchDailyAPI();\n  }, []);\n\n  const {data} = state;\n\n  const lineChartData = {\n    labels: data.map(({date}) => date),\n    datasets: [\n      {\n        label: 'Infected',\n        data: data.map(({confirmed}) => confirmed),\n        borderColor: '#3333ff',\n        fill: true,\n      },\n      {\n        label: 'Deaths',\n        data: data.map(({deaths}) => deaths),\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true,\n      },\n    ],\n  };\n  const lineChart =\n    !state.loading && data.length ? <Line data={lineChartData} /> : null;\n\n  const barChartData = {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [\n        {\n          label: 'People',\n          backgroundColor: [\n            'rgba(0, 0, 255, 0.5)',\n            'rgba(0, 255, 0, 0.5)',\n            'rgba(255, 0, 0, 0.5)',\n          ],\n          data: [confirmed.value, recovered.value, deaths.value],\n        },\n      ],\n    },\n    options: {\n      legend: {display: false},\n      title: {display: true, text: `Current state in ${selectedCountry}`},\n    },\n  };\n\n  const barChart = confirmed ? (\n    <Bar data={barChartData.data} options={barChartData.options} />\n  ) : null;\n\n  return (\n    <div className=\"container chart\">\n      {selectedCountry ? barChart : lineChart}\n    </div>\n  );\n};\n\nexport default Charts;\n","import React, {useReducer, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport {fetchCountries, countriesReducer} from '../../api';\nimport './CountryPicker.css';\n\nconst CountryPicker = ({handleCountryChange, selectedCountry}) => {\n  const initialState = {\n    countries: [],\n  };\n\n  const [state, dispatch] = useReducer(countriesReducer, initialState);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      await fetchCountries(dispatch);\n    };\n    fetchAPI();\n  }, []);\n\n  return (\n    <FormControl className=\"formControl\">\n      <NativeSelect value={selectedCountry} onChange={e => handleCountryChange(e.target.value)}>\n        <option value=\"\">GLOBAL</option>\n        {state.countries.map((country) => (\n          <option key={`${country.name}-${country.iso3}`} value={country.name}>\n            {country.name}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React, {useState, useEffect, useReducer} from 'react';\nimport {Cards, Chart, CountryPicker} from './components';\nimport {fetchData, dataReducer} from './api';\nimport coronaImage from './image/image.png'\nimport './App.css';\n\nconst App = () => {\n  const initialState = {\n    data: {},\n    loading: false,\n    error: '',\n  };\n\n  const [country, setCountry] = useState('');\n\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      await fetchData(dispatch, country);\n    };\n    fetchAPI();\n  }, [country]);\n\n  return (\n    <div className=\"container\">\n      {state.loading || JSON.stringify(state.data) === '{}' ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <img className=\"corona-img\" src={coronaImage} alt=\"COVID-19\" />\n          <Cards data={state.data} />\n          <CountryPicker\n            handleCountryChange={setCountry}\n            selectedCountry={country}\n          />\n          <Chart selectedCountry={country} selectedDailyData={state.data} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}